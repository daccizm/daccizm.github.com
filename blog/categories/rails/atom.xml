<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Decimal Blue Note]]></title>
  <link href="http://fukuishere.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://fukuishere.github.com/"/>
  <updated>2013-03-31T21:05:27+09:00</updated>
  <id>http://fukuishere.github.com/</id>
  <author>
    <name><![CDATA[fukuishhere]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Railsプロジェクト作成～Github～Herokuにデプロイ]]></title>
    <link href="http://fukuishere.github.com/blog/2013/03/23/create-rails/"/>
    <updated>2013-03-23T22:42:00+09:00</updated>
    <id>http://fukuishere.github.com/blog/2013/03/23/create-rails</id>
    <content type="html"><![CDATA[<p>個人的メモのため手順を残しておく</p>

<p><strong>Step:1 Railsプロジェクト作成</strong><br/>
<strong>Step:2 gemのインストール</strong>
<strong>Step:3 MVCの作成</strong><br/>
<strong>Step:4 deviseをgenerate</strong><br/>
<strong>Step:5 bootstrapをgenerate</strong><br/>
<strong>Step:6 DBを作成</strong><br/>
<strong>Step:7 Railsを起動</strong><br/>
<strong>Step:8 Herokuにデプロイ</strong><br/>
<strong>Step:9 GithubにPush</strong></p>

<hr />

<p><strong>Step:1-1 Railsプロジェクト親階層に移動。</strong><br/>
僕の環境ならRailsAppのディレクトリに各Railsプロジェクトを作成している。</p>

<pre><code>$cd RailsApp
</code></pre>

<p><strong>Step:1-2 Gemfileを新規作成</strong><br/>
※端末のグローバルな環境ではBundlerぐらいしかインストールしていない。<br/>
railsコマンドを使いたいから暫定的にインスコ。</p>

<p>```ruby Gemfile
source 'https://rubygems.org'</p>

<p>gem 'rails', '3.2.11'
```</p>

<p><strong>Step:1-3 Railsをインストール</strong></p>

<pre><code>$bundle install --path vendor/bundle
</code></pre>

<p><strong>Step:1-4 Railsプロジェクトを新規作成</strong><br/>
herokuを利用するためpostgresqlをDBに指定。</p>

<pre><code>$bundle exec rails new sample --skip-bundle -d postgresql
</code></pre>

<p><strong>Step:1-5 databese.ymlの編集</strong><br/>
development, testのadapterを"sqlite3"にしておく。</p>

<p>```ruby config/database.yml
development:
  adapter: sqlite3</p>

<p>～省略～</p>

<p>test:
  adapter: sqlite3</p>

<p>```</p>

<p><strong>Step:1-6 暫定で作成したRailsを削除</strong></p>

<pre><code>$rm -f Gemfile
$rm -f Gemfile.lock
$rm -rf .bundle
$rm -R vendor
</code></pre>

<p><strong>Step:1-7 Railsプロジェクトに移動</strong></p>

<pre><code>$cd sample
</code></pre>

<p><strong>Step:1-8 .gitignoreを編集</strong><br/>
gitの管理対象を外すため、以下を追加</p>

<p><code>ruby .gitignore
/vendor/bundle
/public/assets/*
/db/schema.rb
</code></p>

<hr />

<p><strong>Step:2-1 Gemfileの編集</strong></p>

<ul>
<li>devise</li>
<li>rspec-rails</li>
<li>factory_girl_rails</li>
<li>twitter-bootstrap-rails</li>
</ul>


<p>```ruby Gemfile</p>

<h1>PostgreSQL</h1>

<p>group :production do
  gem 'pg'
end</p>

<h1>Sqlite3</h1>

<h1>assetsにするとherokuのdeploy時に怒られる</h1>

<p>group :development, :test do
  gem 'sqlite3'
end</p>

<h1>ログイン管理</h1>

<p>gem 'devise'</p>

<h1>デザイン周りを簡単に</h1>

<h1>assetsで定義するとherokuで動かすとエラーになる</h1>

<p>gem 'twitter-bootstrap-rails'</p>

<p>group :assets do
  # RSpec
  gem 'rspec-rails'
  # RSpecと大親友
  gem 'factory_girl_rails'
  # twitter-bootstrap-railsインスコするときはこいつも一緒に
  gem 'less-rails'</p>

<p>  # 以下の行をコメント解除
  gem 'therubyracer', :platform => :ruby
end
```</p>

<p><strong>Step:2-2 gemのインストール</strong></p>

<pre><code>$bundle install --path vendor/bundle --without production
</code></pre>

<hr />

<p><strong>Step:3-1 単数形/複数形の対応を確認</strong></p>

<p><code>ruby config/initializers/inflections.rb
ActiveSupport::Inflector.inflections do |inflect|
  inflect.irregular 'person', 'people'
end
</code></p>

<p><strong>Step:3-2 必要なモデルをscaffoldで作成</strong></p>

<p>※参考サイト<br/>
<a href="http://alpha-netzilla.blogspot.jp/2011/11/rails-3.html">http://alpha-netzilla.blogspot.jp/2011/11/rails-3.html</a></p>

<pre><code>$bundle exec rails g scaffold user name:string
$bundle exec rails g scaffold book title:string price:integer
$bundle exec rails g model users_book user:references book:references
</code></pre>

<p>※中間テーブルはModelだけで十分。<br/>
※コマンド実行後にusers_booksテーブルが作成される。<br/>
※Railsでは語尾にしか複数形の's'をつけてくれないから、'user'は手動で's'を付ける。<br/>
※scaffoldの取り消し</p>

<pre><code>$bundle exec rails destroy scaffold user
</code></pre>

<p><strong>Step:3-2 中間テーブルのマイグレーションファイルの編集</strong><br/>
主キー列、created_at列、updated_at列が不要な中間テーブルの作成前には
一部編集が必要である。<br/>
主キーを無効化し、かつタイムスタンプ列を削除する。</p>

<p>```ruby db/migrate/YYYYmmddHHMMSS_create_users_books.rb
def change
  create_table :users_books, :id=>false do |t|</p>

<pre><code>t.references :user
t.references :book
t.timestamps ←削除
</code></pre>

<p>  end
  add_index :users_books, :user_id
  add_index :users_books, :book_id
end
```</p>

<hr />

<p><strong>Step:4-1 deviseのインストール</strong></p>

<p>※参考サイト
<a href="http://d.hatena.ne.jp/ema25/20110806/1312624651">http://d.hatena.ne.jp/ema25/20110806/1312624651</a></p>

<pre><code>$bundle exec rails g devise:install
</code></pre>

<p><strong>Step:4-2 deviseで使うMailの設定</strong><br/>
deviseライブラリを通じて送られるメールに記載するurlについて。<br/>
<code>ruby vi config/environments/development.rb
config.action_mailer.default_url_options = { :host =&gt; 'localhost:3000' }
</code></p>

<p><strong>Step:4-3 routes.rbの編集</strong><br/>
<code>ruby config/routes.rb
root :to =&gt; "welcome#index"
</code></p>

<p><strong>Step:4-4 rootパスのwelcome#indexを作成</strong></p>

<pre><code>$ bundle exec rails g controller welcome index
</code></pre>

<p><strong>Step:4-5 デフォルトのページを削除</strong></p>

<pre><code>$git rm public/index.html
</code></pre>

<p><strong>Step:4-6 deviseをuserモデルに適用</strong></p>

<pre><code>$bundle exec rails g devise user
</code></pre>

<p><strong>Step:4-XX 補足</strong><br/>
※notice,alertのメッセージ<br/>
```ruby app/views/layouts/application.html.erb</p>

<p class="notice"><%= notice %></p>
<p class="alert"><%= alert %></p>
```

※ログイン、ログアウトのリンクを張る時はこんな感じ  
```ruby app/views/layouts/application.html.erb
<% if user_signed_in? %>
  <%= current_user.name %>さん / 
  <%= link_to "ログアウト", destroy_user_session_path, :method => 'delete' %>
  <%= link_to "ユーザ情報の編集", edit_user_registration_path %>
<% else %>
  <%= link_to "ログイン", new_user_session_path %>
  <%= link_to "登録", new_user_registration_path %>
<% end %>
```

- - -

**Step:5-1 bootstrapのinstall**  
    $bundle exec rails g bootstrap:install

**Step:5-2 レイアウトを適用**  

※可変に設定"fluid"  
※「Overwrite ～ (enter "h" for help) [Ynaqdh]」と聞いてくるので、"Y"で上書きする。

    $bundle exec rails g bootstrap:layout application ﬂuid

- - -

**Step:6-1 DB作成**  
    $bundle exec rake db:create
    $bundle exec rake db:migrate

- - -

**Step:7-1 Rails起動**  
    $bundle exec rails s

- - -

**Step:8-1 前準備**  
assetsが存在しない場合、コンパイルしなおしてくれるようにfalseからtrueに変更
```ruby config/environments/production.rb
config.assets.compile = true
```

deveise&herokuを利用するとなることこれが必要。rake asset時に怒られる。
```ruby config/application.rb
# use devise for heroku
config.assets.initialize_on_precompile = false
```

**Step:8-2 Gemfileの編集**  

```ruby Gemfile
gem 'heroku'
```

**Step:8-3 gemのinstall**  
    $bundle install --path vendor/bundle --without production

**Step:8-4 Herokuにログインできるか確認**  
    $bundle exec heroku login

**Step:8-5 Herokuにアプリ作成**  
※「--stack cedar」でherokuの最新の環境にデプロイできる  
※"appname"にURLのアプリ名部分を指定（省略可）  
    $bundle exec heroku create appname --stack cedar

**Step:8-6 GitのリモートリポジトリにHerokuが登録されているのを確認**  
    $git remote -v

**Step:8-7 HerokuにGitでデプロイ**  
    $git push heroku master

**Step:8-8 HerokuにDBを作成**  
    $bundle exec heroku run rake db:migrate

**Step:8-9 Herokuにデプロイしたアプリケーションを確認**  
    $bundle exec heroku open

- - -

**Step:9-1 Githubに新しいリポジトリを作成**  
[https://github.com/](https://github.com/)

**Step:9-2 GithubにPush**  
    $git init
    $git add .
    $git commit -m "first commit"
    $git remote add origin git@github.com:username/sample.git
    $git push origin master

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Datetime,ActiveSupport::TimeWithZoneクラスの拡張]]></title>
    <link href="http://fukuishere.github.com/blog/2013/03/23/meta-datetime-ext/"/>
    <updated>2013-03-23T18:45:00+09:00</updated>
    <id>http://fukuishere.github.com/blog/2013/03/23/meta-datetime-ext</id>
    <content type="html"><![CDATA[<ul>
<li>やりたいこと。<br/>
「モデルをcreateした作成日がいつか判定したい」</li>
</ul>


<p>例えば、こんな感じ。</p>

<blockquote><p>entry.created_at.this_year?</p></blockquote>

<p>めちゃくちゃハマったorz<br/>
Datetimeを再オープンしてRspecも問題なく動作して問題なし！！<br/>
でも、、、Rails consoleでundefind methodで怒られる。。</p>

<ul>
<li>結論<br/>
「Datetimeの拡張ではない、ActiveSupport::TimeWithZoneの拡張が必要！！」</li>
</ul>


<p>created_atのクラスをrails consoleで確認。</p>

<pre><code>irb(main):001:0* Entry.create(:user_id=&gt;1, :title=&gt;"title", :content=&gt;"content").created_at.class
=&gt; ActiveSupport::TimeWithZone
</code></pre>

<p>ということで、拡張用のモジュールを作成。</p>

<p>```ruby lib/class_ext.rb
module DateTimeExt
  def this_year?</p>

<pre><code>self.year == Date.today.year
</code></pre>

<p>  end
end
```</p>

<p>そして、libs.rbを作成してMix-in。<br/>
（名前は特になんでもOK）</p>

<p>```ruby config/initializers/libs.rb
require 'core_ext'</p>

<p>ActiveSupport::TimeWithZone.class_eval do
  include DateTimeExt
end
```</p>

<p>rails consoleで確認。</p>

<pre><code>irb(main):002:0&gt; Entry.create(:user_id=&gt;1, :title=&gt;"title", :content=&gt;"content").created_at.this_year?
=&gt; true
</code></pre>
]]></content>
  </entry>
  
</feed>
